
Operation
=========

This is for the backend, for help with the website interface,
see :ref:`user-interface`.

Running Detcap
--------------
Installing detcap will place a ``detcap`` executable in your PATH.
Try running ``detcap`` on your command line.

``detcap --help`` will show some options related to logging.

There's one subcommand available, ``monitor``. This launches detcap
and begins processing. It will gather data and generate new outputs
every minute. Try ``detcap monitor --help``.


The options:

- ``-s``, ``--seedlink-server``: The seedlink server to source data
  from, e.g. "localhost:18000" if you had one running locally. If
  blank, this will default to IRIS. I don't recommend this as it's slow
  and we are definitely over whatever rate limit IRIS stipulates.

- ``-i``, ``--inventory``: A StationXML inventory file. Detcap needs
  response-level metadata to work. If this isn't provided, the inventory
  is fetched from FDSN. If provided but doesn't exist, the inventory
  is fetched from FDSN and stored to this file for later use. Note
  fetching inventory can take upwards of 10 minutes.

- ``-f``, ``--fdsn-server``: The FDSN server to fetch inventory from.
  Not required if you provide an inventory file. This is with protocol,
  e.g. "http://localhost:8081" for a locally running FDSN server. If
  blank, IRIS is used. See note on IRIS and Seedlink server above.

- ``-t``, ``--tag``: If provided, this will be appended to outputs.
  Helpful when you're running multiple instances on the same
  config file.

- ``-d``, ``--save-dir``: The directory to save outputs to.

- ``-r``, ``--redis-db``: An alternative backend to save outputs to.
  Provide the integer of a Redis database to store the output to.

Finally you will need to provide a config file as an argument.

Config File
-----------
The config file is in JSON. An example exists at ``neac-detcap/neac/config.json``.

The dictionary ``default`` contains some default values. If any of
these are omitted from a map config, they will source their value from
here.

The following dictionary ``map`` contains subdictionaries. Each of these
is a map config (keyed by the desired map name) and contains a map
config.

Parameters
~~~~~~~~~~
- ``east``, ``south``, ``west``, ``north``: bounds of the map. Defines
  the area the map covers.

- ``resolution``: The resolution in degrees of the grid overlaid on the 
  map. Each ``resolution`` by ``resolution`` grid cell is a geographic
  point that will have a metric calculated for it. The centre of each
  cell is the origin, i.e. the metric will be calculated at that exact
  point and interpolated over the rest of the cell by contouring. Detcap
  does its best to fit cells given your bounds and resolution but will
  truncate the number of cells if required.

- ``metric``: The magnitude metric we are calculating. Currently only
  ``mla`` (Australian local magnitude) and ``mb`` (body magnitude) are
  supported. Note ``mla`` will only cover the Australian continent,
  regardless of if your selected coverage are extends beyond it.

- ``n_stations``: The number of stations your system requires to make
  a reliable detection. For example, you may set this to the number
  of phases required for SeisComP to make an automatic detection. This
  defines how many stations are involved in calculating a value for
  each cell.

- ``magnitude_cmap``: The colour map to use for the metric contours.
  Any matplotlib compatible colour map can be used, see the
  `reference <http://matplotlib.org/stable/gallery/color/colormap_reference.html>`_.

- ``magnitude_scale_lower``: The minimum of the colormap scale. A value
  in units of the metric (mla for ``mla``, mb for ``mb``). Values below this
  will be shown as light grey.

- ``magnitude_scale_upper``: Same as above but for the maximum. Values
  above this are shown as dark grey.

- ``magnitude_scale_interval``: The steps of the contouring. Example:
  if you selected a lower of 0 and an upper of 4 and an interval of 1,
  the contours would display [0 to 1, 1 to 2, 2 to 3, 3 to 4].

- ``latency_scale_lower``, ``latency_scale_upper``, ``latency_scale_interval``:
  Same as for magnitude. The units are seconds.

- ``whitelist``, ``blacklist``: See :ref:`station-filtering` below.

- ``station_good_color``: Stations that are working will be displayed
  in this colour.

- ``station_bad_color``: Stations that are not working (no data received)
  will be displayed in this colour.

- ``station_bad_color``: Stations that are working but outputting bad
  data will be displayed in this colour.

- ``skip_upload``: If True, upload the outputs to SKIP. You will need
  to set ``SKIP_URL`` and ``SKIP_API_KEY`` as environment variables
  to access SKIP.

- ``skip_upload_freq_alert``:  When in alert (see :ref:`alerting` below),
  the output will be uploaded to SKIP after this many update cycles.

- ``skip_upload_freq_nominal``: When not in alert, the output will be
  uploaded to SKIP after this many update cycles.

Alerting
--------
The ``alerts`` parameter is a dictionary specified as map parameter,
each alert being a dictionary keyed by its name.
There's an example of configuring alerts in ``detcap/neac/config_alert_example.json``.

Alerts, and whether they are active, are written to the output
metadata. See :ref:`outputs`.

There are two types of alert:

Regional
~~~~~~~~
Alerts on the metric value in a particular region.

- ``region``: A geosjon polygon defining the area of interest.

- ``type``: "magnitude" or "latency". The metric value to
  alert on.

- ``calculator``: How to derive a single value from all metric values
  within the region specified. Current choices are "max" and "min".

- ``limit``: The threshold of the alert. 

- ``comparator``: how to compare the value from ``calculator`` against
  ``limit``. Choices are ">", "<", ">=", "<=". "==", "!=".
  If ``<calculated_vale> <comparator> <limit>`` is True, the alert
  is triggered.

- ``messsage``: An optional description for the alert.

Station
~~~~~~~
Alerts on the percentage of stations that are "down" (no data received).

.. todo::

    I just realised on writing this that there's a bug. Stations will
    be double counted in cases of e.g. [AU, AU.AS] - woops!

- ``type``: Only ``station_status`` is applicable. This defines a 
  station-level alert.

- ``limit``: An alert threshold as a percentage from 0 to 100.

- ``comparator``: How to compare the percentage of downed stations
  to the provided ``limit``. Same choices as regional alerts.

- ``network_codes``: A list of networks/stations to include in the alert.
  This works as prefix, e.g. if you specify ``[AU]``, the alert will
  act on all AU stations. If you specify ``[AU.AS]``, the alert will
  act on the Alice Springs array.

- ``message``: An optional description for the alert.

Note that station is only considered down if all of its channels are
offline.

.. _station-filtering:

Blacklisting and Whitelisting
-----------------------------

.. note:

   You should only filter at the STATION_CODE.NETWORK_CODE level.
   Detcap considers all sensors of included stations and internally
   selects channel types. Including sensors or channels in your filter
   could lead to broken maps.

Optional blacklist and whitelist files can be provided as part of a 
config. These files contain lists of regex strings. Any station
that matches any of the regexes will be excluded from monitoring.

An example of a blacklist to simulate a USGS outage:

.. code::
   
    ^AV.*$
    ^C0.*$
    ^CU.*$
    ^GS.*$
    ^HV.*$
    ^IC.*$
    ^IU.*$
    ^IW.*$
    ^MI.*$
    ^N4.*$
    ^NE.*$
    ^US.*$

An example of a whitelist:

.. code::
    
    ^AU.MBWA.*$
    ^AU.GIRL.*$
    ^AU.FITZ.$

In this case, only Marble Bar, Giralia and Fitzory Crossing
will be monitored, everything else will be excluded.

Whitelist/Blacklist interaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The behaviour is modified if you include both a blacklist and whitelist.
In this scenario, stations are excluded by the blacklist, except for
those present in the whitelist, i.e. the whitelist becomes a list of
exception rules for the blacklist.

This is useful, for example, if you wanted to exclude all of a network
but keep a handful of that network's stations, without excluding
all other networks. Example:

.. code::

    # Blacklist:
    ^AU.*$

    # Whitelist:
    ^AU.MBWA.*$
    ^AU.GIRL.*$
    ^AU.FITZ.$

In the above example, every network except AU will be included,
with the exception of Marble Bar, Giralia and Fitzroy crossing.

Outputs
-------

Each map has two output files, generated after each update cycle:

- ``<Map name>_map_<time>.json``
- ``<Map name>_metadata_<time>.png``

The map data is five collections of geojson:

- ``magnitude``: magnitude contours.

- ``magnitude_explanation``: the stations and values involved in calculating
  the magnitude for a coordinate.

- ``latency``: latency contours.

- ``latency_explanation``: the stations and values involved in calculating
  the latency for a coordinate.

- ``stations``: station coordinates with some station performance data.

Magnitude and Latency contours
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``magnitude`` and ``latency`` are collections of MultiPolygons describing
contours, with some additional properties for styling:
    
- ``level`` (str): of the format "<contour_lower> to <contour_upper> <units>"
  and is used for displaying the value of a contour area on the map.

- ``weight`` (int): line weight for the contour boundaries.

- ``color`` (str): Hex code of the contour boundary colour.

- ``opacity`` (float, 0 to 1): opacity of the contour boundary.

- ``fillColor`` (str): Hex code of the contour area colour.

- ``fillOpacity`` (float, 0 to 1): opacity of the contour area.

Explanation
~~~~~~~~~~~
The ``explanation`` data contains a FeatureCollection for each coordinate
of the map, containing:

- A polygon describing the cell of the map grid (e.g. a <resolution> x <resolution>
  cell centred on the coordinate).

  - has property ``type`` (str) of "coordinate" to help distinguish
    the feature when rendering a map.

For each of the `n` stations used for the coordinate:

- A LineString from the station to the coordinate.

    - has property ``type`` (str) of "distance" to help distinguish
      the feature when rendering a map.

    - has property ``travel_time`` (float) for latency and ``attenuation`` (float)
      for magnitude. This is the travel time or attenuation from the coordinate
      to the station that is added to the station's reading.

- A Point showing the station's coordinates.

    - has property ``type`` (str) of "station" to help distinguish
      the feature when rendering a map.

    - has property ``latency`` (float) for latency and ``snr_mag`` (float) for
      magnitude. This is the value observed on the station for the respective
      metric (``latency`` being average delay between consecutive waveform packets,
      ``snr_mag`` being average of peak-to-peak simulated ampliude * signal-to-noise ratio).

Stations
~~~~~~~~
A FeatureCollection of Points, each point being the coordinates of a station.
Has properties:

- ``name`` (str): the station name (<NET>.<STA>)

- ``channel_status`` (dict): a dictionary mapping channel code to its status.
  Status is a dictionary of ``status`` (str), a status label (see below), and
  ``message`` (str), an English explanation of what the status means.

- ``color`` (str): Hex code of the station colour (determined by its status).

The possible status codes are:

- "Bad data": the data recieved for this channel is obviously in error (e.g.
  all zero amplitude).

- "No data": this channel had no data present for the requested time window (either
  it's offline or too slow to be calculated on).

- "Warning": the channel is operational but may be in error (e.g. the station's
  reported value is outside the (interquartile range * 1.5) relative to the
  other stations in the map).

- "Good": the channel reported good values, but a better channel was used.

- "Best": the channel reported good values and had the best (e.g. fastest, 
  least noisy) readings of all channels.

The colours for each status are defined in the config. Note that a station
that has at least one good channel will be displayed as such, even if
other channels are in warning or considered bad. All channels need to
be "bad" or in warning to be displayed as such.

Metadata
~~~~~~~~
JSON object containing two fields:

- ``parameters`` (dict): the map parameters, containing:

    - ``name`` (str): the map name.
    - ``bounds``: (dict): contains the ``west``, ``south``, ``east`` and ``north``
      (float) bounds of the map.
    - ``resolution`` (float): the resolution of the map grid.
    - ``n_stations`` (int): the number of stations used for each grid cell.
    - ``lta_period`` (float): the time window in seconds that station data is
      sampled from.

- ``statuses``: similar to ``channel_status`` for the ``station`` map data.
  This maps the station name to a dictionary of statuses for each of its
  channels.
